---
- name: Load variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower | replace(' ', '_')}}.yml"
        - defaults.yml
      paths:
        - ../ambari-server/vars

- name: Install the ambari-server package
  package:
    name: ambari-server
    state: latest
  notify: Reload systemd

- name: Generate the cluster repo
  set_fact:
    ambari_repo: "{{ (repos | selectattr('name', 'match', '^ambari_repo') | first).url }}"
    
- name: set repo url for ambari
  replace:
    path: /var/lib/ambari-server/resources/stacks/BIGTOP/3.2.0/repos/repoinfo.xml
    regexp: "<baseurl>.*</baseurl>"
    replace: "<baseurl>{{ ambari_repo }}</baseurl>"
    backup: no

- name: set repo url for ambari
  replace:
    path: /var/lib/ambari-server/resources/stacks/BIGTOP/3.3.0/repos/repoinfo.xml
    regexp: "<baseurl>.*</baseurl>"
    replace: "<baseurl>{{ ambari_repo }}</baseurl>"
    backup: no

# run user must be set before ambari server setup
- name: Check ambari-server run user
  become_user: root
  become_method: sudo
  command: grep -q '^ambari-server.user=' /etc/ambari-server/conf/ambari.properties
  changed_when: false
  ignore_errors: true
  register: grep_result

- name: Add ambari-server.user configuration
  become_user: root
  become_method: sudo
  blockinfile:
    path: /etc/ambari-server/conf/ambari.properties
    block: |
      ambari-server.user={{ ambari_options.ambari_server_run_user }}
  when: grep_result.rc != 0

- name: Replace ambari-server.user configuration
  become_user: root
  become_method: sudo
  lineinfile:
    path: /etc/ambari-server/conf/ambari.properties
    regex: '.*ambari-server\.user.*'
    line: 'ambari-server.user={{ ambari_options.ambari_server_run_user }}'
    backrefs: yes
    insertafter: EOF
    state: present
  when: grep_result.rc == 0


# 创建ambari 临时文件目录
- name: mkdir /usr/share/java/
  file:
    path: /usr/share/java/
    state: directory

- name:  get jdbc jar
  copy:
    src: "{{ item }}"
    dest: "{{ postgres_jdbc_location | dirname }}"
  with_items:
    - "{{ postgres_jdbc_location | basename }}"
    - "{{ mysql_jdbc_location | basename }}"

- meta: flush_handlers

- block:
    - name: Install mysql required packages (for hive embedded)
      package:
        name: "{{ item }}"
        state: present
      with_items: "{{ mysql_packages | join(',') }}"

    - block:
        - name: Install mysql-server on Ubuntu 16 (for hive embedded)
          apt:
            name: 'mysql-server'
            update_cache: yes
            state: present

        - name: Configure mysql to listen on all interfaces (Ubuntu 16)
          ini_file:
            path: '/etc/mysql/mysql.conf.d/mysqld.cnf'
            create: no
            section: 'mysqld'
            option: 'bind-address'
            value: '*'
            no_extra_spaces: yes
            state: present
      when: ansible_distribution|lower == "ubuntu" and ansible_distribution_major_version|int == 16
      run_once: true
      delegate_to: "{{ hiveserver_hosts[0] }}"

    - name: Configure the Ambari JDBC driver for mysql (for hive embedded)
      shell: /usr/sbin/ambari-server setup --jdbc-db=mysql --jdbc-driver={{ mysql_jdbc_location }}
      notify: Restart ambari-server
  when: database == "embedded" and hiveserver_hosts is defined and hiveserver_hosts|length > 0

- block:
    - name: Install "{{ database }}" required packages
      package:
        name: "{{ item }}"
        state: present
      with_items: "{{ lookup('vars', database + '_packages') | join(',') }}"

    - block:
        - name: Load the Ambari Server schema (postgres)
          postgresql_db:
            name: "{{ database_options.ambari_db_name }}"
            maintenance_db: "{{ database_options.ambari_db_name }}"
            login_host: "{{ database_hostname }}"
            port: "{{ postgres_port }}"
            login_user: "{{ database_options.ambari_db_username }}"
            login_password: "{{ database_options.ambari_db_password }}"
            state: restore
            target: /var/lib/ambari-server/resources/Ambari-DDL-Postgres-CREATE.sql
          when: ansible_os_family|lower != "suse"
      when: database == "postgres"

    - block:
        - name: Load the Ambari Server schema (mysql)
          mysql_db:
            name: "{{ database_options.ambari_db_name }}"
            login_host: "{{ database_hostname }}"
            login_port: "{{ mysql_port }}"
            login_user: "{{ database_options.ambari_db_username }}"
            login_password: "{{ database_options.ambari_db_password }}"
            state: import
            target: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql
          register: import_results
          ignore_errors: true

        - name: Fail if the mysql schema could not be loaded
          fail:
            msg: Schema could not be loaded. Error is "{{ import_results.msg }}!"
          when: import_results is failed and not import_results.msg is search("Table .* already exists")
      when: database == "mysql" or database == "mariadb"

    - name: Configure the Ambari JDBC driver
      shell: /usr/sbin/ambari-server setup --jdbc-db={{ database | regex_replace('mariadb', 'mysql') }} --jdbc-driver={{ lookup('vars', database + '_jdbc_location') }}
      notify: Restart ambari-server

    - name: Set the Ambari Server database setup options
      set_fact:
        ambari_database_options: "--database={{ database | regex_replace('mariadb', 'mysql') }} \
                                  --databasehost={{ database_hostname }} \
                                  --databaseport={{ lookup('vars', database | regex_replace('mariadb', 'mysql') + '_port') }} \
                                  --databasename={{ database_options.ambari_db_name }} \
                                  --databaseusername={{ database_options.ambari_db_username }} \
                                  --databasepassword={{ database_options.ambari_db_password }}"
  when: database != "embedded"

- name: Set the Ambari Server Java setup option (OpenJDK)
  set_fact:
    ambari_java_options: "-j {{ openjdk_path }}"

- name: Run Ambari Server setup
  shell: "/usr/sbin/ambari-server setup -s {{ ambari_java_options|default('') }} {{ ambari_database_options|default('') }}"
  notify: Restart ambari-server

- name: Update ambari-server log dir
  lineinfile:
    dest: /etc/ambari-server/conf/log4j.properties
    regexp: '^ambari.log.dir='
    line: 'ambari.log.dir={{ base_log_dir }}/ambari-server'
  notify: Restart ambari-server

- name: Increase the Ambari Server startup timeout
  lineinfile:
    path: /etc/ambari-server/conf/ambari.properties
    state: present
    line: 'server.startup.web.timeout=120'
  notify: Restart ambari-server

- meta: flush_handlers

- name: Make sure the ambari-server service is started
  service:
    name: ambari-server
    state: started

#增加开机启动
- name: Make sure the ambari-server service is enabled
  service:
    name: ambari-server
    enabled: yes
  ignore_errors: true

