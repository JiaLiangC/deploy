
# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import DynamicVariableGenerator

import pytest

class TestDynamicVariableGenerator:

    #  generate dynamic j2template variables with valid input
    def test_valid_input(self):
        advanced_conf = {
            "group_services": {
                "group1": ["service1", "service2"],
                "group2": ["service3", "service4"]
            },
            "host_groups": {
                "group1": ["host1", "host2"],
                "group2": ["host3", "host4"]
            },
            "security_options": {
                "external_hostname": "kdc.example.com"
            },
            "database_options": {
                "external_hostname": "db.example.com"
            },
            "external_ntp_server_hostname": "ntp.example.com",
            "repos": [
                {
                    "name": "ambari_repo",
                    "url": "http://repo.example.com"
                }
            ]
        }

        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        generated_variables = dynamic_variable_generator.generate()

        assert generated_variables is not None
        assert isinstance(generated_variables, dict)
        assert len(generated_variables) > 0
        assert "ntp_server_hostname" in generated_variables
        assert "hadoop_base_dir" in generated_variables
        assert "kdc_hostname" in generated_variables
        assert "database_hostname" in generated_variables
        assert "ambari_server_host" in generated_variables
        assert "ambari_repo_url" in generated_variables

    #  generate dynamic j2template variables with empty input
    def test_empty_input(self):
        advanced_conf = {}

        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        generated_variables = dynamic_variable_generator.generate()

        assert generated_variables is not None
        assert isinstance(generated_variables, dict)
        assert len(generated_variables) == 0

    #  generate dynamic j2template variables with missing input
    def test_missing_input(self):
        advanced_conf = {
            "group_services": {
                "group1": ["service1", "service2"],
                "group2": ["service3", "service4"]
            },
            "host_groups": {
                "group1": ["host1", "host2"],
                "group2": ["host3", "host4"]
            },
            "security_options": {},
            "database_options": {},
            "external_ntp_server_hostname": "",
            "repos": []
        }

        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        generated_variables = dynamic_variable_generator.generate()

        assert generated_variables is not None
        assert isinstance(generated_variables, dict)
        assert len(generated_variables) > 0
        assert "ntp_server_hostname" in generated_variables
        assert "hadoop_base_dir" in generated_variables
        assert "kdc_hostname" in generated_variables
        assert "database_hostname" in generated_variables
        assert "ambari_server_host" in generated_variables
        assert "ambari_repo_url" in generated_variables

    #  generate dynamic j2template variables with large input
    def test_large_input(self):
        advanced_conf = {
            "group_services": {
                "group1": ["service1", "service2"],
                "group2": ["service3", "service4"]
            },
            "host_groups": {
                "group1": ["host1", "host2"],
                "group2": ["host3", "host4"]
            },
            "security_options": {
                "external_hostname": "kdc.example.com"
            },
            "database_options": {
                "external_hostname": "db.example.com"
            },
            "external_ntp_server_hostname": "ntp.example.com",
            "repos": [
                {
                    "name": "ambari_repo",
                    "url": "http://repo.example.com"
                }
            ]
        }

        # Add large input
        for i in range(1000):
            advanced_conf[f"group{i}"] = [f"service{i}"]
            advanced_conf[f"host{i}"] = [f"host{i}"]

        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        generated_variables = dynamic_variable_generator.generate()

        assert generated_variables is not None
        assert isinstance(generated_variables, dict)
        assert len(generated_variables) > 0
        assert "ntp_server_hostname" in generated_variables
        assert "hadoop_base_dir" in generated_variables
        assert "kdc_hostname" in generated_variables
        assert "database_hostname" in generated_variables
        assert "ambari_server_host" in generated_variables
        assert "ambari_repo_url" in generated_variables

    #  generate dynamic j2template variables with invalid input
    def test_invalid_input(self):
        advanced_conf = None

        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        generated_variables = dynamic_variable_generator.generate()

        assert generated_variables is not None
        assert isinstance(generated_variables, dict)
        assert len(generated_variables) == 0

    #  generate hosts groups variables with valid input
    def test_valid_input(self):
        advanced_conf = {
            "group_services": {
                "group1": ["service1", "service2"],
                "group2": ["service3", "service4"]
            },
            "host_groups": {
                "group1": ["host1", "host2"],
                "group2": ["host3", "host4"]
            },
            "security_options": {
                "external_hostname": "kdc.example.com"
            },
            "database_options": {
                "external_hostname": "db.example.com"
            },
            "external_ntp_server_hostname": "ntp.example.com",
            "repos": [
                {
                    "name": "ambari_repo",
                    "url": "http://repo.example.com"
                }
            ]
        }

        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        generated_variables = dynamic_variable_generator.generate()

        assert generated_variables is not None
        assert isinstance(generated_variables, dict)
        assert len(generated_variables) > 0
        assert "ntp_server_hostname" in generated_variables
        assert "hadoop_base_dir" in generated_variables
        assert "kdc_hostname" in generated_variables
        assert "database_hostname" in generated_variables
        assert "ambari_server_host" in generated_variables
        assert "ambari_repo_url" in generated_variables

    #  generate hosts groups variables with empty input
    def test_empty_input(self):
        advanced_conf = {
            "group_services": {},
            "host_groups": {},
            "security_options": {
                "external_hostname": ""
            },
            "database_options": {
                "external_hostname": ""
            },
            "external_ntp_server_hostname": "",
            "repos": []
        }

        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        generated_variables = dynamic_variable_generator.generate()

        assert generated_variables is not None
        assert isinstance(generated_variables, dict)
        assert len(generated_variables) > 0
        assert "ntp_server_hostname" in generated_variables
        assert "hadoop_base_dir" in generated_variables
        assert "kdc_hostname" in generated_variables
        assert "database_hostname" in generated_variables
        assert "ambari_server_host" in generated_variables
        assert "ambari_repo_url" in generated_variables
