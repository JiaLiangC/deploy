
# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import GroupConsistencyValidator

import pytest

class TestGroupConsistencyValidator:

    #  Validator instance is created successfully
    def test_validator_instance_created_successfully(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)

        assert isinstance(validator, GroupConsistencyValidator)

    #  All hosts defined in conf.yml are also defined in hosts.yml
    def test_all_hosts_defined_in_conf_defined_in_hosts(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Each host name is listed only once in a host group
    def test_each_host_name_listed_only_once_in_host_group(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Each service name is listed only once in a host group
    def test_each_service_name_listed_only_once_in_host_group(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Each service name listed in group_services is supported
    def test_each_service_name_in_group_services_supported(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  conf.yml is empty
    def test_conf_yml_is_empty(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  hosts.yml is empty
    def test_hosts_yml_is_empty(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  host_groups is empty
    def test_host_groups_is_empty(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  group_services is empty
    def test_group_services_is_empty(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  A host name is listed in multiple host groups
    def test_host_name_listed_in_multiple_host_groups(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0



# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import GroupConsistencyValidator

import pytest

class TestValidate:

    #  Validates that each host name is only listed once in a group.
    def test_validate_unique_host_names(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Validates that each host name in a group is defined in the hosts configuration.
    def test_validate_defined_host_names(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Add a host to the hosts configuration
        hosts_info_conf.set("hosts", ["192.168.0.1 host1 password"])

        # Add a group with an undefined host
        advanced_conf.set("host_groups", {"group1": ["host1", "host2"]})

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 1

    #  Validates that each service name in a group is supported.
    def test_validate_supported_service_names(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Add a group with an unsupported service
        advanced_conf.set("group_services", {"group1": ["service1"]})

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 1

    #  Validates that the group names in host_groups and group_services match.
    def test_validate_matching_group_names(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Add different group names in host_groups and group_services
        advanced_conf.set("host_groups", {"group1": ["host1"]})
        advanced_conf.set("group_services", {"group2": ["service1"]})

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 1

    #  Returns the validator object.
    def test_return_validator_object(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        result = validator.validate()

        assert isinstance(result, GroupConsistencyValidator)

    #  Validates an empty hosts configuration.
    def test_validate_empty_hosts_configuration(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Empty hosts configuration

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Validates an empty host_groups configuration.
    def test_validate_empty_host_groups_configuration(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Empty host_groups configuration

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Validates an empty group_services configuration.
    def test_validate_empty_group_services_configuration(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Empty group_services configuration

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Validates a group with an empty list of hosts.
    def test_validate_empty_group_hosts(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Add a group with an empty list of hosts
        advanced_conf.set("host_groups", {"group1": []})

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0

    #  Validates a group with an empty list of services.
    def test_validate_empty_group_services(self):
        advanced_conf = AdvancedConfiguration()
        hosts_info_conf = HostsInfoConfiguration()

        # Add a group with an empty list of services
        advanced_conf.set("group_services", {"group1": []})

        validator = GroupConsistencyValidator(advanced_conf, hosts_info_conf)
        validator.validate()

        assert len(validator.err_messages) == 0
