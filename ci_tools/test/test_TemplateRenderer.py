
# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import TemplateRenderer

import pytest

class TestTemplateRenderer:

    #  Can render a template with a given context
    def test_render_template_with_context(self):
        template_str = "Hello {{ name }}!"
        context = {"name": "John"}
        renderer = TemplateRenderer()
        result = renderer.render_template(template_str, context).decode_result()
        assert result == "Hello John!"

    #  Can decode the rendered result as JSON
    def test_decode_result_as_json(self):
        template_str = '{"name": "John"}'
        context = {}
        renderer = TemplateRenderer()
        result = renderer.render_template(template_str, context).decode_result(decoder="json")
        assert result == {"name": "John"}

    #  Can decode the rendered result as YAML
    def test_decode_result_as_yaml(self):
        template_str = "name: John"
        context = {}
        renderer = TemplateRenderer()
        result = renderer.render_template(template_str, context).decode_result(decoder="yaml")
        assert result == {"name": "John"}

    #  Raises an exception when trying to decode before rendering
    def test_decode_before_rendering_exception(self):
        renderer = TemplateRenderer()
        with pytest.raises(Exception):
            renderer.decode_result()

    #  Raises an exception when trying to decode an invalid format
    def test_decode_invalid_format_exception(self):
        template_str = "Hello {{ name }}!"
        context = {"name": "John"}
        renderer = TemplateRenderer()
        renderer.render_template(template_str, context)
        with pytest.raises(ValueError):
            renderer.decode_result(decoder="invalid")

    #  Raises an exception when trying to render an invalid template string
    def test_render_invalid_template_string_exception(self):
        template_str = ""
        context = {}
        renderer = TemplateRenderer()
        with pytest.raises(Exception):
            renderer.render_template(template_str, context)
