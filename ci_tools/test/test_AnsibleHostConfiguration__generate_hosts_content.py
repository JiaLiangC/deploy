
# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import AnsibleHostConfiguration

import pytest

class Test_GenerateHostsContent:

    #  Generates hosts content with correct format and variables
    def test_correct_format_and_variables(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        expected_content = "[ambari-server]\nambari.example.com ansible_host= ansible_ssh_pass=\n\n[hadoop-cluster]\n\n[all:vars]\nansible_user=root\n"
        assert hosts_content == expected_content

    #  Includes ambari-server and hadoop-cluster groups
    def test_includes_groups(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        assert "[ambari-server]" in hosts_content
        assert "[hadoop-cluster]" in hosts_content

    #  Handles valid input with multiple hosts and passwords
    def test_multiple_hosts_and_passwords(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_info_configuration.set_conf({"hosts": ["host1 192.168.0.1 pass1", "host2 192.168.0.2 pass2"]})
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        expected_content = "[ambari-server]\nambari.example.com ansible_host= ansible_ssh_pass=\n\n[hadoop-cluster]\nhost1 ansible_host=192.168.0.1 ansible_ssh_pass=pass1\nhost2 ansible_host=192.168.0.2 ansible_ssh_pass=pass2\n\n[all:vars]\nansible_user=root\n"
        assert hosts_content == expected_content

    #  Uses ansible_user from HostsInfoConfiguration
    def test_uses_ansible_user(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_info_configuration.set_conf({"hosts": ["host1 192.168.0.1 pass1"], "user": "test_user"})
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        expected_content = "[ambari-server]\nambari.example.com ansible_host= ansible_ssh_pass=\n\n[hadoop-cluster]\nhost1 ansible_host=192.168.0.1 ansible_ssh_pass=pass1\n\n[all:vars]\nansible_user=test_user\n"
        assert hosts_content == expected_content

    #  Raises InvalidConfigurationException if host not found in parsed hosts
    def test_host_not_found(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_info_configuration.set_conf({"hosts": ["host1 192.168.0.1 pass1"]})
        with pytest.raises(InvalidConfigurationException):
            ansible_host_configuration._generate_hosts_content(ambari_server_host)

    #  Handles empty input
    def test_empty_input(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_info_configuration.set_conf({"hosts": []})
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        expected_content = "[ambari-server]\nambari.example.com ansible_host= ansible_ssh_pass=\n\n[hadoop-cluster]\n\n[all:vars]\nansible_user=root\n"
        assert hosts_content == expected_content

    #  Handles input with only one host
    def test_handles_input_with_one_host(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_info_configuration.set_conf({"hosts": ["host1 192.168.0.1 password"]})
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        expected_content = "[ambari-server]\nambari.example.com ansible_host= ansible_ssh_pass=\n\n[hadoop-cluster]\nhost1 ansible_host=192.168.0.1 ansible_ssh_pass=password\n\n[all:vars]\nansible_user=root\n"
        assert hosts_content == expected_content

    #  Handles input with only one group
    def test_handles_input_with_one_group(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_info_configuration.set_conf({"hosts": ["host1 192.168.0.1 password", "host2 192.168.0.2 password"]})
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        expected_content = "[ambari-server]\nambari.example.com ansible_host= ansible_ssh_pass=\n\n[hadoop-cluster]\nhost1 ansible_host=192.168.0.1 ansible_ssh_pass=password\nhost2 ansible_host=192.168.0.2 ansible_ssh_pass=password\n\n[all:vars]\nansible_user=root\n"
        assert hosts_content == expected_content

    #  Handles input with multiple hosts in one group
    def test_handles_input_with_multiple_hosts_in_one_group(self):
        hosts_info_configuration = HostsInfoConfiguration()
        dynamic_variable_generator = DynamicVariableGenerator(advanced_conf)
        ansible_host_configuration = AnsibleHostConfiguration("example", hosts_info_configuration, dynamic_variable_generator)
        ambari_server_host = "ambari.example.com"
        hosts_info_configuration.set_conf({"hosts": ["host1 192.168.0.1 password", "host2 192.168.0.2 password", "host3 192.168.0.3 password"]})
        hosts_content = ansible_host_configuration._generate_hosts_content(ambari_server_host)
        expected_content = "[ambari-server]\nambari.example.com ansible_host= ansible_ssh_pass=\n\n[hadoop-cluster]\nhost1 ansible_host=192.168.0.1 ansible_ssh_pass=password\nhost2 ansible_host=192.168.0.2 ansible_ssh_pass=password\nhost3 ansible_host=192.168.0.3 ansible_ssh_pass=password\n\n[all:vars]\nansible_user=root\n"
        assert hosts_content == expected_content
