
# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import parse,InvalidConfigurationException

import pytest

class TestParse:

    #  Given a valid input with a single configuration string containing hostname, IP address and password separated by spaces, the function should return a list containing a single tuple with the parsed hostname, IP address and password.
    def test_valid_input_with_single_configuration_string_with_password(self):
        input_data = ["node1.example.com 10.1.1.1 password"]
        expected_output = [("node1.example.com", "10.1.1.1", "password")]
        result = parse(input_data)
        assert result == expected_output

    #  Given a valid input with a single configuration string containing a hostname and IP address separated by spaces, but no password, the function should return a list containing a single tuple with the parsed hostname, IP address and an empty string for the password.
    def test_valid_input_with_single_configuration_string_without_password(self):
        input_data = ["node1.example.com 10.1.1.1"]
        expected_output = [("node1.example.com", "10.1.1.1", "")]
        result = parse(input_data)
        assert result == expected_output

    #  Given a valid input with a single configuration string containing a hostname, IP address and password separated by spaces, where the hostname contains a range expression, the function should return a list containing tuples with the parsed hostnames, IP addresses and password for each value in the range.
    def test_valid_input_with_single_configuration_string_with_range_expression(self):
        input_data = ["node[1-3].example.com 10.1.1.[1-3] password"]
        expected_output = [("node1.example.com", "10.1.1.1", "password"), ("node2.example.com", "10.1.1.2", "password"), ("node3.example.com", "10.1.1.3", "password")]
        result = parse(input_data)
        assert result == expected_output

    def test_valid_input_with_different_configuration_strings(self):
        # Arrange
        input_data = ["node[1-3].example.com 10.1.1.[1-3] password",
                      "node[4-6]xx.example.com 10.1.1.[4-6]xx password",
                      "[7-9]node.example.com 10.1.1.[7-9]node password"]
        expected_output = [("node1.example.com", "10.1.1.1", "password"), ("node2.example.com", "10.1.1.2", "password"), ("node3.example.com", "10.1.1.3", "password"),
                           ("node4xx.example.com", "10.1.1.4xx", "password"), ("node5xx.example.com", "10.1.1.5xx", "password"), ("node6xx.example.com", "10.1.1.6xx", "password"),
                           ("7node.example.com", "10.1.1.7node", "password"), ("8node.example.com", "10.1.1.8node", "password"), ("9node.example.com", "10.1.1.9node", "password")]

        # Act
        result = parse(input_data)

        # Assert
        assert result == expected_output

    def test_valid_input_with_single_configuration_string_without_range_expression(self):
        # Arrange
        input_data = ["node1.example.com 10.1.1.1 password"]
        expected_output = [("node1.example.com", "10.1.1.1", "password")]

        # Act
        result = parse(input_data)

        # Assert
        assert result == expected_output

    #  Given an empty input, the function should raise an InvalidConfigurationException.
    def test_empty_input(self):
        # Arrange
        input_data = []

        # Act & Assert
        with pytest.raises(InvalidConfigurationException):
            parse(input_data)

    #  Given an input with a configuration string that does not contain exactly three space-separated values, the function should raise an InvalidConfigurationException.
    def test_invalid_input_with_incorrect_number_of_values(self):
        # Arrange
        input_data = ["node1.example.com 10.1.1.1 password extra_value"]

        # Act & Assert
        with pytest.raises(InvalidConfigurationException):
            parse(input_data)

    #  Given an input with a configuration string that contains a range expression in both the hostname and IP address fields, but the ranges have different lengths, the function should raise an InvalidConfigurationException.
    def test_invalid_input_with_different_length_ranges(self):
        # Arrange
        input_data = ["node[1-3].example.com 10.1.1.[1-2] password"]

        # Act & Assert
        with pytest.raises(InvalidConfigurationException):
            parse(input_data)

    #  Given a valid input with a single configuration string containing hostname, IP address and password separated by spaces, the function should return a list containing a single tuple with the parsed hostname, IP address and password.
    def test_valid_input_with_single_configuration_string_with_password(self):
        # Arrange
        input_data = ["node1.example.com 10.1.1.1 password"]
        expected_output = [("node1.example.com", "10.1.1.1", "password")]

        # Act
        result = parse(input_data)

        # Assert
        assert result == expected_output

    #  Given a valid input with multiple configuration strings, each containing a hostname, IP address and password separated by spaces, the function should return a list containing tuples with the parsed hostnames, IP addresses and passwords for each configuration string.
    def test_valid_input_with_multiple_configuration_strings(self):
        # Arrange
        input_data = ["node1.example.com 10.1.1.1 password", "node2.example.com 10.1.1.2 password", "node3.example.com 10.1.1.3 password"]
        expected_output = [("node1.example.com", "10.1.1.1", "password"), ("node2.example.com", "10.1.1.2", "password"), ("node3.example.com", "10.1.1.3", "password")]

        # Act
        result = parse(input_data)

        # Assert
        assert result == expected_output

    #  Given a valid input with multiple configuration strings, some of which contain hostname range expressions, the function should return a list containing tuples with the parsed hostnames, IP addresses and passwords for each configuration string, including the expanded hostnames for range expressions.
    def test_valid_input_with_multiple_configuration_strings_and_range_expressions(self):
        # Arrange
        input_data = ["node[1-3].example.com 10.1.1.[1-3] password"]
        expected_output = [("node1.example.com", "10.1.1.1", "password"), ("node2.example.com", "10.1.1.2", "password"), ("node3.example.com", "10.1.1.3", "password")]

        # Act
        result = parse(input_data)

        # Assert
        assert result == expected_output
