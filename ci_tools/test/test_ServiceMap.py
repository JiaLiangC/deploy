
# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import ServiceMap

import pytest

class TestServiceMap:

    #  can retrieve service information for supported services
    def test_retrieve_service_information(self):
        service_map = ServiceMap()
        service_info = service_map.get_services("hdfs")
        assert service_info == {
            "server": ["NAMENODE", "DATANODE", "SECONDARY_NAMENODE", "JOURNALNODE", "ZKFC"],
            "clients": ["HDFS_CLIENT", "MAPREDUCE2_CLIENT"]
        }

    #  can determine if a service is supported
    def test_determine_service_support(self):
        service_map = ServiceMap()
        is_supported = service_map.is_service_supported("hive")
        assert is_supported == True

    #  can retrieve the entire services map
    def test_retrieve_entire_services_map(self):
        service_map = ServiceMap()
        services_map = service_map.get_services_map()
        assert services_map == {
            "hbase": {
                "server": ["HBASE_MASTER", "HBASE_REGIONSERVER"],
                "clients": ["HBASE_CLIENT"]
            },
            "hdfs": {
                "server": ["NAMENODE", "DATANODE", "SECONDARY_NAMENODE", "JOURNALNODE", "ZKFC"],
                "clients": ["HDFS_CLIENT", "MAPREDUCE2_CLIENT"]
            },
            "yarn": {
                "server": ["NODEMANAGER", "RESOURCEMANAGER", "HISTORYSERVER", "APP_TIMELINE_SERVER",
                           "YARN_REGISTRY_DNS",
                           "TIMELINE_READER"],
                "clients": ["YARN_CLIENT"]
            },
            "hive": {
                "server": ["HIVE_METASTORE", "WEBHCAT_SERVER", "HIVE_SERVER"],
                "clients": ["HIVE_CLIENT", "HCAT", "TEZ_CLIENT"]
            },
            "zookeeper": {
                "server": ["ZOOKEEPER_SERVER"],
                "clients": ["ZOOKEEPER_CLIENT"]
            },
            "kafka": {
                "server": ["KAFKA_BROKER", ],
                "clients": []
            },
            "spark": {
                "server": ["SPARK_JOBHISTORYSERVER", "SPARK_THRIFTSERVER"],
                "clients": ["SPARK_CLIENT"]
            },
            "flink": {
                "server": ["FLINK_HISTORYSERVER"],
                "clients": ["FLINK_CLIENT"]
            },
            "ranger": {
                "server": ["RANGER_ADMIN", "RANGER_TAGSYNC", "RANGER_USERSYNC"],
                "clients": []
            },
            "infra_solr": {
                "server": ["INFRA_SOLR"],
                "clients": ["INFRA_SOLR_CLIENT"]
            },
            "ambari": {
                "server": ["AMBARI_SERVER"],
                "clients": []
            },
            "ambari_metrics": {
                "server": ["METRICS_COLLECTOR", "METRICS_GRAFANA"],
                "clients": ["METRICS_MONITOR"]
            },
            "kerberos": {
                "server": ["KERBEROS_CLIENT"],
                "clients": ["KERBEROS_CLIENT"]
            }
        }

    #  returns None for non-existent services
    def test_non_existent_service(self):
        service_map = ServiceMap()
        service_info = service_map.get_services("non_existent_service")
        assert service_info == None

    #  returns False for unsupported services
    def test_unsupported_service(self):
        service_map = ServiceMap()
        is_supported = service_map.is_service_supported("solr")
        assert is_supported == False

    #  returns False for non-existent services
    def test_non_existent_service_support(self):
        service_map = ServiceMap()
        is_supported = service_map.is_service_supported("non_existent_service")
        assert is_supported == False
