
# Generated by CodiumAI

from ci_tools.python.install_utils.conf_refactor import ServiceManager

import pytest

class TestServiceManager:

    #  can get service key from service name
    def test_get_service_key_from_service(self):
        advanced_conf = {
            "group_services": {
                "group1": ["hdfs", "yarn"],
                "group2": ["hive", "zookeeper"]
            }
        }
        service_manager = ServiceManager(advanced_conf)
        service_key = service_manager.get_service_key_from_service("HBASE_MASTER")
        assert service_key == "hbase"
        with pytest.raises(InvalidConfigurationException):
            service_manager.get_service_key_from_service("INVALID_SERVICE")

    #  can get services that need installation
    def test_get_services_need_install(self):
        advanced_conf = {
            "group_services": {
                "group1": ["hdfs", "yarn"],
                "group2": ["hive", "zookeeper"]
            }
        }
        service_manager = ServiceManager(advanced_conf)
        services_need_install = service_manager.get_services_need_install()
        assert services_need_install == ["hdfs", "yarn", "hive", "zookeeper"]

    #  can get service clients that need installation
    def test_get_service_clients_need_install(self):
        advanced_conf = {
            "group_services": {
                "group1": ["hdfs", "yarn"],
                "group2": ["hive", "zookeeper"]
            }
        }
        service_manager = ServiceManager(advanced_conf)
        service_clients_need_install = service_manager.get_service_clients_need_install(["hdfs", "yarn"])
        assert service_clients_need_install == ["HDFS_CLIENT", "MAPREDUCE2_CLIENT", "YARN_CLIENT"]

    #  raises InvalidConfigurationException if service name not found in services map
    def test_invalid_service_name(self):
        advanced_conf = {
            "group_services": {
                "group1": ["hdfs", "yarn"],
                "group2": ["hive", "zookeeper"]
            }
        }
        service_manager = ServiceManager(advanced_conf)
        with pytest.raises(InvalidConfigurationException):
            service_manager.get_service_key_from_service("INVALID_SERVICE")

    #  can handle empty group_services in advanced_conf
    def test_empty_group_services(self):
        advanced_conf = {
            "group_services": {}
        }
        service_manager = ServiceManager(advanced_conf)
        services_need_install = service_manager.get_services_need_install()
        assert services_need_install == []

    #  can handle empty configuration template for a service
    def test_empty_configuration_template(self):
        advanced_conf = {
            "group_services": {
                "group1": ["hdfs", "yarn"],
                "group2": ["hive", "zookeeper"]
            }
        }
        service_manager = ServiceManager(advanced_conf)
        service_clients_need_install = service_manager.get_service_clients_need_install(["kafka"])
        assert service_clients_need_install == []
